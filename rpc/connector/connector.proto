syntax = "proto3";
package telepresence.connector;

import "google/protobuf/empty.proto";
import "rpc/common/version.proto";
import "rpc/manager/manager.proto";

option go_package = "github.com/telepresenceio/telepresence/rpc/v2/connector";

// The Connector service is responsible for connecting to the traffic manager
// and manage intercepts. It can only run when a Daemon is running.
service Connector {
  // Returns version information from the Connector
  rpc Version(google.protobuf.Empty) returns (telepresence.common.VersionInfo);

  // Connects to the cluster and connects the laptop's network (via
  // the daemon process) to the cluster's network.  A result code of
  // UNSPECIFIED indicates that the connection was successfully
  // initiated; if already connected, then either ALREADY_CONNECTED or
  // MUST_RESTART is returned, based on whether the current connection
  // is in agreement with the ConnectionRequest.
  rpc Connect(ConnectRequest) returns (ConnectInfo);

  // Status is much like Connect, except that it doesn't actually do
  // anything.  It's a dry-run.
  rpc Status(ConnectRequest) returns (ConnectInfo);

  // Adds an intercept to a workload.  Requires having already called
  // Connect.
  rpc CreateIntercept(CreateInterceptRequest) returns (InterceptResult);

  // Deactivates and removes an existent workload intercept.
  // Requires having already called Connect.
  rpc RemoveIntercept(telepresence.manager.RemoveInterceptRequest2) returns (InterceptResult);

  // Uninstalls traffic-agents and traffic-manager from the cluster.
  // Requires having already called Connect.
  rpc Uninstall(UninstallRequest) returns (UninstallResult);

  // Returns a list of workloads and their current intercept status.
  // Requires having already called Connect.
  rpc List(ListRequest) returns (WorkloadInfoSnapshot);

  // Returns a stream of messages to display to the user.  Does NOT
  // require having called anything else first.
  rpc UserNotifications(google.protobuf.Empty) returns (stream Notification);

  rpc Login(LoginRequest) returns (LoginResult);

  // Returns an error with code=NotFound if not currently logged in.
  rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc GetCloudUserInfo(UserInfoRequest) returns (UserInfo);

  rpc GetCloudAPIKey(KeyRequest) returns (KeyData);

  rpc GetCloudLicense(LicenseRequest) returns (LicenseData);

  // Quits (terminates) the connector process.
  rpc Quit(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// ConnectRequest contains the information needed to connect ot a cluster.
message ConnectRequest {
  map<string, string> kube_flags = 1;
  repeated string mapped_namespaces = 2;
  reserved 3;
}

message ConnectInfo {
  enum ErrType {
    UNSPECIFIED            = 0; // success
    ALREADY_CONNECTED      = 2; // success
    MUST_RESTART           = 7; // failure: would-be-success, but kubeconfig has changed
    DISCONNECTED           = 3; // failure: Connect has not yet been called (only returned from Status)
    CLUSTER_FAILED         = 4; // failure: error parsing kubeconfig or talking to the cluster; error_text is set
    TRAFFIC_MANAGER_FAILED = 6; // failure: error talking to the in-cluster traffic-manager; error_text is set
    DAEMON_FAILED          = 8; // failure: error talking to the on-laptop root daemon; error_text is set

    reserved 1;
    reserved 5;
  }
  ErrType error = 1;
  string error_text = 2; // only set for some error codes, see above

  // everything else is only set for error=UNSPECIFIED,
  // error=ALREADY_CONNECTED, or error=MUST_RESTART.

  string cluster_server = 3;
  string cluster_context = 4;
  bool bridge_ok = 5;
  reserved 6;

  telepresence.manager.AgentInfoSnapshot agents = 7;
  telepresence.manager.InterceptInfoSnapshot intercepts = 8;
  repeated manager.IngressInfo ingress_infos = 9;

  telepresence.manager.SessionInfo session_info = 10;
  string cluster_id = 11;
}

message UninstallRequest {
  enum UninstallType {
    UNSPECIFIED = 0;

    // Uninstalls an agent from the named workloads
    NAMED_AGENTS = 1;

    // Uninstalls all agents
    ALL_AGENTS = 2;

    // Uninstalls all agents and the traffic-manager
    EVERYTHING = 3;
  }

  UninstallType uninstall_type = 1;
  repeated string agents = 2;

  // Namespace of agents to remove.
  string namespace = 3;
}

message UninstallResult {
  string error_text = 1;
}

message CreateInterceptRequest {
  // No need to set spec.client; the connector will fill that in for
  // you.
  telepresence.manager.InterceptSpec spec = 1;
  string mount_point = 2;
  string agent_image = 3;
}

// InterceptError is a common error type used by the intercept call family (add,
// remove, list, available).
enum InterceptError {
  UNSPECIFIED = 0; // no error
  reserved 1;
  NO_CONNECTION = 2; // Have not made the .Connect RPC call (or it errored)
  NO_TRAFFIC_MANAGER = 3;
  TRAFFIC_MANAGER_CONNECTING = 4;
  TRAFFIC_MANAGER_ERROR = 5;
  ALREADY_EXISTS = 6;
  LOCAL_TARGET_IN_USE = 7;
  NO_ACCEPTABLE_WORKLOAD = 8;
  AMBIGUOUS_MATCH = 9;
  FAILED_TO_ESTABLISH = 10;
  reserved 11;
  NOT_FOUND = 12;
  MOUNT_POINT_BUSY = 13;
}

message ListRequest {
  enum Filter {
    UNSPECIFIED = 0;
    INTERCEPTS = 1;
    INSTALLED_AGENTS = 2;
    INTERCEPTABLE = 3;
    EVERYTHING = 4;
  }
  Filter filter = 1;

  // Namespace to list.
  string namespace = 2;
}

// WorkloadInfo contains information about a workload
// https://kubernetes.io/docs/concepts/workloads/
message WorkloadInfo {
  // Name of workload
  string name = 1;

  // Reason why workload cannot be intercepted, or empty if it can.
  string not_interceptable_reason = 2;

  // AgentInfo reported from the traffic manager in case the workload has a traffic-agent installed
  telepresence.manager.AgentInfo agent_info = 3;

  // InterceptInfo reported from the traffic manager in case the workload is currently intercepted
  telepresence.manager.InterceptInfo intercept_info = 4;

  // Workload Resource type (e.g. Deployment, ReplicaSet, StatefulSet)
  string workload_resource_type = 5;
}

message WorkloadInfoSnapshot {
  repeated WorkloadInfo workloads = 1;
}

message InterceptResult {
  telepresence.manager.InterceptInfo intercept_info = 1;
  InterceptError error = 2;
  string error_text = 3;

  // The environment of the app
  map<string,string> environment = 4;

  // The service uid associated with the workload intercepted
  string service_uid = 5;

  // The kind of workload in this intercept
  string workload_kind = 6;
}

message Notification {
  string message = 1;
}

message LoginRequest {
  string api_key = 1;
}

message LoginResult {
  enum Code {
    UNSPECIFIED = 0;
    OLD_LOGIN_REUSED = 1; // success; already logged in
    NEW_LOGIN_SUCCEEDED = 2; // success
    // There is no failure code; a gRPC error code is returned instead.
  }
  Code code = 1;
}

message UserInfoRequest {
  bool auto_login = 1;
  bool refresh = 2;
}

message UserInfo {
  // These field names don't quite follow the usual convenctions
  // because they need to match the JSON that Ambassador Cloud gives
  // us, because we use the same struct for both.
  //
  // protolint:disable FIELD_NAMES_LOWER_SNAKE_CASE

  string id = 1;
  string name = 2;
  string avatarUrl = 3;
  string accountId = 4;
  string accountName = 5;
  string accountAvatarUrl = 6;

  // protolint:disable FIELD_NAMES_LOWER_SNAKE_CASE
}

message KeyRequest {
  bool auto_login = 1;
  string description = 2;
}

message KeyData {
  string api_key = 1;
}

message LicenseRequest {
  string id = 1;
}

message LicenseData {
  string license = 1;
  string host_domain = 2;
}
